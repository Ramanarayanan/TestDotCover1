# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CombineDocker

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore

    - name: publish
      run:  |
         dotnet publish $GITHUB_WORKSPACE/WebApplication1/WebApplication1.csproj --configuration Release --output publish/WebApplication1
         dotnet publish $GITHUB_WORKSPACE/TestProject1/TestProject1.csproj --configuration Release --output publish/TestProject1
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
         name: Application_Artifact
         path: |
                publish/WebApplication1
                publish/TestProject1
  Test:
    needs: build
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v3
      id: download
      with:
        name: Application_Artifact
        path: ./Package  
    - name: 'Echo download path'
      run: echo ${{steps.download.outputs.download-path}}
    - name: Display structure of downloaded files
      run: ls -R
      working-directory: ./Package
    - name: Install DotCover nuget
      run: |
         
    - name: Test
      run: dotnet test ./Package/TestProject1/TestProject1.dll --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Install DotCover
      run: |
           dotnet tool install --global JetBrains.dotCover.GlobalTool
    - name: Test
      run: dotnet test ./Package/TestProject1/TestProject1.dll --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

   
    - name: Test
      run: |
          
           dotnet dotcover test ./Package/TestProject1/TestProject1.dll --dcReportType=XML --dcOutput=./Package/coverage_report.xml --logger "console;verbosity=normal"
    - name: Display structure of Test files
      run: ls -R
      working-directory: .
 # Docker:
 #   needs: Test
  #  runs-on: ubuntu-latest
   # steps:
   #   - uses: actions/checkout@v3
   #   - name: Build the Docker image
   #     run: docker build . --file $GITHUB_WORKSPACE/WebApplication1.Dockerfile --tag my-image-name:$(date +%s)
    
  Docker-build:
    needs: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and export
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: myimage:latest
          outputs: type=docker,dest=/tmp/myimage.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: myimage
          path: /tmp/myimage.tar

  Docker-Artifact:
    runs-on: ubuntu-latest
    needs: Docker-build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: myimage
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a            

    
          
  
    
